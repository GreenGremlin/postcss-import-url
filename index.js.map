{"version":3,"sources":["src\\index.js"],"names":[],"mappings":";;;;;;;;;;uBAAoB,SAAS;;;;wBACT,UAAU;;;;qBACZ,OAAO;;;;yBACV,YAAY;;;;qBACT,QAAQ;;;;AAE1B,IAAM,IAAI,GAAG,wBAAM,MAAM,CAAC,CAAC;AAC3B,IAAM,KAAK,GAAG,qBAAQ,IAAI,CAAC,KAAK,CAAC;;qBAElB,qBAAQ,MAAM,CAAC,oBAAoB,EAAE,gBAAgB,CAAC;;AAErE,SAAS,gBAAgB,CAAC,OAAO,EAAE;AAClC,QAAO,GAAG,OAAO,IAAI,EAAE,CAAC;AACxB,QAAO,UAAS,GAAG,EAAE;AACpB,MAAM,OAAO,GAAG,EAAE,CAAC;AACnB,KAAG,CAAC,WAAW,CAAC,QAAQ,EAAE,SAAS,WAAW,CAAC,MAAM,EAAE;gBACnB,KAAK,CAAC,MAAM,CAAC,MAAM,CAAC;;;;OAAlD,UAAU;;OAAK,WAAW;;AAC/B,aAAU,GAAG,iBAAiB,CAAC,UAAU,CAAC,CAAC;AAC3C,OAAI,CAAC,wBAAM,UAAU,CAAC,EAAE,OAAO;AAC/B,OAAI,YAAY,GAAG,WAAW,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;AACzC,OAAI,OAAO,GAAG,aAAa,CAAC,UAAU,CAAC,CAAC,IAAI,CAAC,UAAS,SAAS,EAAE;AAChE,QAAI,YAAY,EAAE;AACjB,SAAI,SAAS,GAAG,qBAAQ,MAAM,CAAC,EAAE,IAAI,EAAE,OAAO,EAAE,MAAM,EAAE,YAAY,EAAE,CAAC,CAAC;AACxE,cAAS,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC;AAC5B,cAAS,GAAG,SAAS,CAAC;KACtB;;AAED,UAAM,CAAC,WAAW,CAAC,SAAS,CAAC,CAAC;IAC9B,CAAC,CAAC;AACH,UAAO,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;GACtB,CAAC,CAAC;AACH,SAAO,sBAAQ,GAAG,CAAC,OAAO,CAAC,CAAC;EAC5B,CAAC;CACF;;AAED,SAAS,aAAa,CAAC,UAAU,EAAE;AAClC,UAAS,QAAQ,CAAC,OAAO,EAAE,MAAM,EAAE;AAClC,MAAI,OAAO,GAAG,uBAAG,GAAG,CAAC,UAAU,EAAE,UAAS,QAAQ,EAAE;AACnD,OAAI,IAAI,GAAG,EAAE,CAAC;AACd,WAAQ,CAAC,EAAE,CAAC,MAAM,EAAE,UAAA,KAAK;WAAI,IAAI,IAAI,KAAK,CAAC,QAAQ,EAAE;IAAA,CAAC,CAAC;AACvD,WAAQ,CAAC,EAAE,CAAC,KAAK,EAAE;WAAM,OAAO,CAAC,IAAI,CAAC;IAAA,CAAC,CAAC;GACxC,CAAC,CAAC;AACH,SAAO,CAAC,EAAE,CAAC,OAAO,EAAE,MAAM,CAAC,CAAC;AAC5B,SAAO,CAAC,GAAG,EAAE,CAAC;EACd;AACD,QAAO,0BAAY,QAAQ,CAAC,CAAC;CAC7B;;AAED,SAAS,iBAAiB,CAAC,KAAK,EAAE;AACjC,KAAI,KAAK,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,KAAK,KAAK,EAAE;AACjC,OAAK,GAAG,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;EACxB;AACD,MAAK,GAAG,IAAI,CAAC,KAAK,UAAS,CAAC;AAC5B,QAAO,KAAK,CAAC;CACb","file":"src/index.js","sourcesContent":["import postcss from \"postcss\";\nimport Promise from \"bluebird\";\nimport phpfn from \"phpfn\";\nimport hh from \"http-https\";\nimport isUrl from \"is-url\";\n\nconst trim = phpfn(\"trim\");\nconst space = postcss.list.space;\n\nexport default postcss.plugin(\"postcss-import-url\", postcssImportUrl);\n\nfunction postcssImportUrl(options) {\n\toptions = options || {};\n\treturn function(css) {\n\t\tconst imports = [];\n\t\tcss.walkAtRules(\"import\", function checkAtRule(atRule) {\n\t\t\tvar [remoteFile, ...otherParams] = space(atRule.params);\n\t\t\tremoteFile = cleanupRemoteFile(remoteFile);\n\t\t\tif (!isUrl(remoteFile)) return;\n\t\t\tvar mediaQueries = otherParams.join(\" \");\n\t\t\tvar promise = createPromise(remoteFile).then(function(otherNode) {\n\t\t\t\tif (mediaQueries) {\n\t\t\t\t\tvar mediaNode = postcss.atRule({ name: \"media\", params: mediaQueries });\n\t\t\t\t\tmediaNode.append(otherNode);\n\t\t\t\t\totherNode = mediaNode;\n\t\t\t\t}\n\t\t\t\t// console.log(otherNode.toString());\n\t\t\t\tatRule.replaceWith(otherNode);\n\t\t\t});\n\t\t\timports.push(promise);\n\t\t});\n\t\treturn Promise.all(imports);\n\t};\n}\n\nfunction createPromise(remoteFile) {\n\tfunction executor(resolve, reject) {\n\t\tvar request = hh.get(remoteFile, function(response) {\n\t\t\tvar body = \"\";\n\t\t\tresponse.on(\"data\", chunk => body += chunk.toString());\n\t\t\tresponse.on(\"end\", () => resolve(body));\n\t\t});\n\t\trequest.on(\"error\", reject);\n\t\trequest.end();\n\t}\n\treturn new Promise(executor);\n}\n\nfunction cleanupRemoteFile(value) {\n\tif (value.substr(0, 3) === \"url\") {\n\t\tvalue = value.substr(3);\n\t}\n\tvalue = trim(value, `'\"()`);\n\treturn value;\n}"]}